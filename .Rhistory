shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
install.packages("rmongodb")
shiny::runApp('Q')
library(mongodb)
library(rmongodb)
install.packages("rmongodb")
library(rmongodb)
qbase <- mongo.create()
qbase
qbase.is.connected()
qbase.is.connected
qbase
qbase.is
qbase.get.err
qbase.methods
qbase.attributes
attributes(qbase)
methodsn(qbase)
methods(qbase)
methods(class=class(qbase))
methods(class=class(mongo))
qbase <- mongo.create()
mongo <-
c
mongo <- mongo.create()
mongo.is.connected
monge.get.databases
mongo.get.databases
mongo.get.databases()
mongo.get.databases(qbase)
qbase <- mongo.create()
mongo.get.databases(qbase)
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
install.packages("rite")
rite()
library(rite)
rite
rite()
print("cat")
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
install.packages("stargazer")
shiny::runApp('Q')
library(stargazer)
stargazer(attitude[1:4,], summary=FALSE)
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(qbase)
cat(qbase)
print(qbase)
methods(qbase)
attributes(qbase)
source('~/.active-rstudio-document', echo=TRUE)
shiny::runApp('Q')
shiny::runApp('Test')
shiny::runApp('Test')
log
shiny::runApp('Test')
library(rmongodb)
dbstats <- c()
log <- function(label, message) {
dbstats <<- c(dbstats,paste0(label,": ",message))
}
qbase <- mongo.create(db="test")
map <- fromJSON('{"title":"test"}')
mongo.insert(qbase,"test",map)
log("connected",mongo.is.connected(qbase))
log("primary",mongo.get.primary(qbase))
log("socket",mongo.get.socket(qbase))
log("databases",mongo.get.databases(qbase))
log("collections",mongo.get.database.collections(qbase,"qbase"))
activetab <<- input$tabs
map <- eval(parse(text = paste0('input$',activetab)))
mapJSON <- toJSON(map)
mapBSON <- mongo.bson.from.JSON(mapJSON)
log("insert",mongo.insert(qbase, "qbase", mapBSON))
log("last error",mongo.get.last.err(qbase,"qbase"))
log("error",mongo.get.err(qbase))
log("server error",mongo.get.server.err(qbase))
log("server error string",mongo.get.server.err.string(qbase))
print(dbstats)
print(dbstats)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
mongo.get.databases(qbase)
mongo.get.database.collections(qbase,"qbase")
mongo.find(qbase)
mongo.find(qbase,"qbase")
qbase
mongo.get.database.collections(qbase,"test")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
shiny::runApp('Q')
source('~/.active-rstudio-document', echo=TRUE)
mongo.find(qbase)
mongo.find(qbase,"test.test")
mongo.find(qbase,"test")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
mongo.count(qbase)
mongo.count(qbase,"test")
mongo.count(qbase,"test.tets")
mongo.count(qbase,"test.test")
source('~/Google Drive/Workspace/mongo.R', echo=TRUE)
source('~/Google Drive/Workspace/mongo.R', echo=TRUE)
source('~/Google Drive/Workspace/mongo.R', echo=TRUE)
source('~/Google Drive/Workspace/mongo.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Google Drive/Workspace/mongo.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
shiny::runApp('Q')
